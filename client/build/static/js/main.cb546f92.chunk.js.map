{"version":3,"sources":["components/LinkButton.jsx","components/Home.js","components/Kits.js","components/Table.js","api/index.js","components/CreateOrEdit.js","components/Error.js","components/PrivateRoute.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","history","to","location","match","staticContext","onClick","kit","rest","event","push","Home","className","href","target","rel","this","allSpecies","map","species","selectSpecies","key","rowCount","Component","Kits","sortKitsByName","kitArray","sort","a","b","aName","name","toUpperCase","bName","currentSpecies","currentPosKits","id","loggedIn","updateTable","tableKitIDs","currentNegKits","Table","generateRows","numRows","row","rows","rowID","rowKey","onChange","e","updateRowCellCount","value","tableRowsHash","onKeyPress","charCode","preventDefault","constants","constant","idx","includes","multiplied","Number","toLocaleString","useGrouping","arrayedKitData","speciesGroup","deleteSpeciesFromTable","colSpan","length","type","deleteKitFromTable","goBack","clearTable","window","print","baseURL","process","trim","undefined","api","axios","create","withCredentials","apis","createKit","kitData","post","updateKitById","put","deleteKitById","delete","getAllKits","get","logIn","loginData","checkLoginStatus","logOut","CreateOrEdit","componentDidMount","params","kitID","state","setState","console","log","localForm","JSON","parse","localStorage","getItem","updateLocalStorage","createOrUpdate","setItem","stringify","handleInput","constantRow","constantNameOrValue","cloneDeep","allKitIDs","has","duplicateID","checkID","alert","capitalizeWords","string","split","word","slice","join","processFields","namePrepped","String","speciesPrepped","constantsPrepped","constantGroup","el","checkForEmptyFields","constantsEmpty","validateFields","handleSubmit","updateOrCreate","updateTableKitData","clearStateAndStorage","fetchKitsFromDatabase","removeItem","modifyConstantRows","modification","deleteKit","createArrayOfNonRepeatingElements","indexToUse","allConstantGroups","allKits","reduce","finalArray","set","Set","add","Array","from","autoComplete","onSubmit","align","disabled","placeholder","onBlur","list","hidden","unit","confirm","Error","PrivateRoute","PrivateComponent","component","path","render","Login","handleChange","action","password","passwordPlaceholder","username","then","response","status","setLoggedInStatus","catch","error","App","fetchLocalStorage","getUser","data","user","bool","localState","tableKitData","res","responseData","extractAllSpecies","createKitIDHash","speciesSet","modifyRowCount","currentKits","filter","sortKits","positiveKits","negativeKits","Object","assign","modifyTableRowsHash","addKitData","removeKitData","hashifyKitData","filteredKitData","updatedKit","mod","i","kitDataHash","concat","arrayifyKitData","groupSpecies","groupArray","inputType","input","clone","speciesRows","keys","IDs","ID","group","kitSpecies","kitsHash","bind","exact","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cb546f92.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\n\nconst LinkButton = props => {\n  const {\n    history,\n    location,\n    match,\n    staticContext,\n    to,\n    onClick,\n    kit,\n    // ⬆ filtering out props that `button` doesn’t know what to do with.\n    ...rest\n  } = props;\n  return (\n    <button\n      {...rest} // `children` is just another prop!\n      onClick={event => {\n        onClick && onClick(event);\n        history.push(to, kit);\n      }}\n    />\n  );\n};\n\nLinkButton.propTypes = {\n  to: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired\n};\n\nexport default withRouter(LinkButton);\n\n//thanks to: https://stackoverflow.com/questions/42463263/wrapping-a-react-router-link-in-an-html-button\n//wrapping a button tag with a react Link or 'a' tag, or vice versa, is not valid HTML and can cause problems\n","//the Home component contains links to different species' kits and a link to the Table component, which also displays how many current kits are in the Table.\nimport React, { Component } from \"react\";\nimport LinkButton from \"./LinkButton.jsx\";\nimport \"./Home.css\";\n\n//THINGS TO DO\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"page\">\n        <header>\n          <h3 className=\"page-title\">Secondary Isolation Calculator</h3>\n          <h5 className=\"home-subtitle\">\n            For{\" \"}\n            <a\n              className=\"miltenyi-link\"\n              href=\"https://www.miltenyibiotec.com/US-en/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Miltenyi Biotec\n            </a>{\" \"}\n            Kits\n          </h5>\n        </header>\n        <div className=\"home-container-species-buttons\">\n          {this.props.allSpecies.map(species => (\n            <LinkButton\n              to=\"/kits\"\n              className=\"species-button\"\n              onClick={() => this.props.selectSpecies(species)}\n              key={species}\n            >\n              {species}\n            </LinkButton>\n          ))}\n        </div>\n        <footer>\n          <LinkButton to=\"/table\" className=\"nav-button table-button\">\n            Table &#40;{this.props.rowCount} Samples&#41;\n          </LinkButton>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","//the Kits component lists all positive & negative kits for the selected species, and allows user to add kits to the Table, to edit/create kits, to go Home, and to go to the Table. the number of kits currently in the Table is displayed.\nimport React, { Component } from \"react\";\nimport LinkButton from \"./LinkButton.jsx\";\nimport \"./Kits.css\";\n\n//THINGS TO DO\n\nclass Kits extends Component {\n  sortKitsByName = kitArray => {\n    return kitArray.sort((a, b) => {\n      const aName = a.name.toUpperCase();\n      const bName = b.name.toUpperCase();\n      if (aName < bName) return -1;\n      if (aName > bName) return 1;\n      return 0;\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"page\">\n        <header>\n          <h3 className=\"page-title\">{this.props.currentSpecies}</h3>\n        </header>\n        <div className=\"kits-body\">\n          <div className=\"kit-section section-positive-selection\">\n            <h5 className=\"kit-section-title\">Positive Selection</h5>\n            <div className=\"kit-section-list\">\n              {this.props.currentPosKits &&\n                this.sortKitsByName(this.props.currentPosKits).map(kit => (\n                  <div className=\"kit-info-container\" key={kit.id}>\n                    <div className=\"kit-name-container\">\n                      <b>{kit.name}</b>\n                      <div>{kit.id}</div>\n                    </div>\n                    <LinkButton\n                      to={`/edit/${kit.id}`}\n                      className={\n                        this.props.loggedIn ? \"nav-button\" : \"logged-out\"\n                      }\n                      //attaches kit object to props.location.state\n                      kit={kit}\n                    >\n                      Edit Kit\n                    </LinkButton>\n                    <div className=\"kit-options-container\">\n                      <div>Samples</div>\n                      <div className=\"kit-options-row\">\n                        <button\n                          className=\"kit-options-button kit-remove-button\"\n                          onClick={() => {\n                            this.props.updateTable(\"subtract\", kit);\n                          }}\n                        >\n                          <b>-</b>\n                        </button>\n                        <div className=\"kit-count\">\n                          {this.props.tableKitIDs[kit.id] || 0}\n                        </div>\n                        <button\n                          className=\"kit-options-button kit-add-button\"\n                          onClick={() => {\n                            this.props.updateTable(\"add\", kit);\n                          }}\n                        >\n                          <b>+</b>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n          <div className=\"kit-section section-negative-selection\">\n            <h5 className=\"kit-section-title\">Negative Selection</h5>\n            <div className=\"kit-section-list\">\n              {this.props.currentNegKits &&\n                this.sortKitsByName(this.props.currentNegKits).map(kit => (\n                  <div className=\"kit-info-container\" key={kit.id}>\n                    <div className=\"kit-name-container\">\n                      <b>{kit.name}</b>\n                      <div>{kit.id}</div>\n                    </div>\n                    <LinkButton\n                      to={`/edit/${kit.id}`}\n                      className={\n                        this.props.loggedIn ? \"nav-button\" : \"logged-out\"\n                      }\n                      //attaches kit object to props.location.state\n                      kit={kit}\n                    >\n                      Edit Kit\n                    </LinkButton>\n                    <div className=\"kit-options-container\">\n                      <div>Samples</div>\n                      <div className=\"kit-options-row\">\n                        <button\n                          className=\"kit-options-button kit-remove-button\"\n                          onClick={() => {\n                            this.props.updateTable(\"subtract\", kit);\n                          }}\n                        >\n                          <b>-</b>\n                        </button>\n                        <div className=\"kit-count\">\n                          {this.props.tableKitIDs[kit.id] || 0}\n                        </div>\n                        <button\n                          className=\"kit-options-button kit-add-button\"\n                          onClick={() => {\n                            this.props.updateTable(\"add\", kit);\n                          }}\n                        >\n                          <b>+</b>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n        </div>\n\n        <footer>\n          <LinkButton to=\"/\" className=\"nav-button home-button\">\n            Home\n          </LinkButton>\n\n          <LinkButton\n            to=\"/create\"\n            className={this.props.loggedIn ? \"nav-button\" : \"logged-out\"}\n          >\n            Create Kit\n          </LinkButton>\n          <LinkButton to=\"/table\" className=\"nav-button table-button\">\n            Table &#40;{this.props.rowCount} Samples&#41;\n          </LinkButton>\n        </footer>\n      </div>\n    );\n  }\n}\nexport default Kits;\n","//the Table component displays all of the kits selected and allows the user to input sample IDs and cell counts to generate the corresponding constants. the Table can then be printed. a \"clear\" button is provided to clear the Table, which will also auto-clear in 24 hours.\nimport React, { Component } from \"react\";\nimport LinkButton from \"./LinkButton.jsx\";\nimport \"./Table.css\";\n\n//THINGS TO DO:\n\nclass Table extends Component {\n  generateRows = kit => {\n    const numRows = this.props.tableKitIDs[kit.id];\n    let row = 1;\n    const rows = [];\n\n    while (row <= numRows) {\n      const rowID = row;\n      const rowKey = kit.id + \" \" + rowID;\n\n      rows.push(\n        <tr key={rowID}>\n          <td className=\"user-input-cell\">\n            <input\n              className=\"user-input\"\n              onChange={e =>\n                this.props.updateRowCellCount(\n                  \"sampleID\",\n                  kit.species,\n                  rowKey,\n                  e.target.value\n                )\n              }\n              value={this.props.tableRowsHash[kit.species][rowKey][0] || \"\"}\n            ></input>\n          </td>\n          <td className=\"user-input-cell\">\n            <input\n              className=\"user-input\"\n              // only allow numbers and decimals\n              onKeyPress={e => {\n                if ((e.charCode < 48 && e.charCode !== 46) || e.charCode > 57)\n                  e.preventDefault();\n              }}\n              onChange={e =>\n                this.props.updateRowCellCount(\n                  \"cellCount\",\n                  kit.species,\n                  rowKey,\n                  e.target.value\n                )\n              }\n              value={this.props.tableRowsHash[kit.species][rowKey][1] || \"\"}\n            ></input>\n          </td>\n          {kit.constants.map((constant, idx) => {\n            //if the constant is for time, a spin, or the final wash, just render it\n            if (\n              constant[1].includes(\"min\") ||\n              constant[1].includes(\"times X mL\") ||\n              constant[1].includes(\"g X min\")\n            ) {\n              return <td key={idx}>{constant[2]}</td>;\n            }\n            //otherwise, multiply the constant by the row's cell count. divide by 10 because the kit instructions use cell counts of 10^7\n            const multiplied =\n              (Number(constant[2]) *\n                this.props.tableRowsHash[kit.species][rowKey][1]) /\n              10;\n            return (\n              <td key={idx}>\n                {multiplied\n                  ? multiplied.toLocaleString(\"en\", { useGrouping: true })\n                  : \"\"}\n              </td>\n            );\n          })}\n        </tr>\n      );\n      ++row;\n    }\n\n    return rows;\n  };\n\n  render() {\n    return (\n      <div className=\"page\">\n        <div className=\"groups-container\" id=\"divToPrint\">\n          {/* generate a new table group for each species */}\n          {this.props.arrayedKitData.map(speciesGroup => (\n            <div className=\"tables-container\" key={speciesGroup[0]}>\n              <div className=\"tables-header\">\n                <div></div>\n                <LinkButton\n                  to=\"/kits\"\n                  className=\"species-name\"\n                  onClick={() => this.props.selectSpecies(speciesGroup[0])}\n                  key={speciesGroup[0]}\n                >\n                  {speciesGroup[0]}\n                </LinkButton>\n                <button\n                  className=\"delete-button delete-species no-print\"\n                  onClick={() =>\n                    this.props.deleteSpeciesFromTable(speciesGroup[0])\n                  }\n                >\n                  x\n                </button>\n              </div>\n              {/* generate a table for each kit in the species group */}\n              {speciesGroup[1].map(kit => (\n                <table className=\"kit-table\" key={kit.id}>\n                  <thead>\n                    <tr>\n                      <th colSpan={kit.constants.length + 2}>\n                        <div className=\"kit-table-title\">\n                          <LinkButton\n                            to={`/edit/${kit.id}`}\n                            className={\n                              this.props.loggedIn\n                                ? \"nav-button no-print\"\n                                : \"logged-out\"\n                            }\n                            //attaches kit object to props.location.state\n                            kit={kit}\n                          >\n                            Edit Kit\n                          </LinkButton>\n                          <div>\n                            <div>\n                              {kit.name}:{\" \"}\n                              <a\n                                href={`https://www.miltenyibiotec.com/US-en/search.html?search=${kit.id}&options=on#globalSearchFamilies=%5B%5D`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                {kit.id}\n                              </a>\n                            </div>\n                            <div>({kit.type} Selection)</div>\n                          </div>\n                          <button\n                            className=\"delete-button delete-kit no-print\"\n                            onClick={() =>\n                              this.props.deleteKitFromTable(kit.id, kit.species)\n                            }\n                          >\n                            x\n                          </button>\n                        </div>\n                      </th>\n                    </tr>\n                    <tr className=\"kit-multipliers-row\">\n                      <th colSpan={2}>Constants:</th>\n                      {/* using idx for the keys because constants can repeat */}\n                      {kit.constants.map((constant, idx) => (\n                        <th key={idx}>{constant[2]}</th>\n                      ))}\n                    </tr>\n                    <tr>\n                      <th>Sample ID</th>\n                      <th>\n                        Cell Count (10<sup>6</sup>)\n                      </th>\n                      {/* using idx for the keys because constants can repeat */}\n                      {kit.constants.map((constant, idx) => (\n                        <th key={idx}>\n                          {constant[0] + \" (\" + constant[1] + \")\"}\n                        </th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>{this.generateRows(kit)}</tbody>\n                  <tfoot className=\"no-print\">\n                    <tr>\n                      <td colSpan={kit.constants.length + 2}>\n                        <div className=\"kit-table-footer\">\n                          <button\n                            className=\"kit-table-row-button add-row-button\"\n                            onClick={() => this.props.updateTable(\"add\", kit)}\n                          >\n                            Add Row\n                          </button>\n                          <button\n                            className=\"kit-table-row-button subtract-row-button\"\n                            onClick={() =>\n                              this.props.updateTable(\"subtract\", kit)\n                            }\n                          >\n                            Subtract Row\n                          </button>\n                        </div>\n                      </td>\n                    </tr>\n                  </tfoot>\n                </table>\n              ))}\n            </div>\n          ))}\n        </div>\n\n        <footer>\n          <button\n            className=\"nav-button\"\n            onClick={() => {\n              this.props.history.goBack();\n            }}\n          >\n            Back\n          </button>\n          <LinkButton to=\"/\" className=\"nav-button home-button\">\n            Home\n          </LinkButton>\n          <button\n            className=\"nav-button clear-table-button\"\n            onClick={() => {\n              this.props.clearTable();\n            }}\n          >\n            Clear Table\n          </button>\n          <button\n            className=\"nav-button\"\n            onClick={() => {\n              window.print();\n            }}\n          >\n            Print\n          </button>\n        </footer>\n      </div>\n    );\n  }\n}\nexport default Table;\n","import axios from \"axios\";\n\nconst baseURL =\n  process.env.NODE_ENV.trim() === \"development\"\n    ? \"http://localhost:8000\"\n    : undefined;\n\nconst api = axios.create({\n  withCredentials: true,\n  baseURL\n});\n\nexport const createKit = kitData => api.post(`/api/kit`, kitData);\nexport const updateKitById = (id, kitData) =>\n  api.put(`/api/kit/${id}`, kitData);\nexport const deleteKitById = id => api.delete(`/api/kit/${id}`);\nexport const getAllKits = () => api.get(`/api/kits`);\nexport const logIn = loginData => api.post(\"/api/login\", loginData);\nexport const checkLoginStatus = () => api.get(\"/api/login\");\nexport const logOut = () => api.post(\"/api/logout\");\n\nconst apis = {\n  createKit,\n  updateKitById,\n  deleteKitById,\n  getAllKits,\n  logIn,\n  checkLoginStatus,\n  logOut\n};\n\nexport default apis;\n","import React, { Component } from \"react\";\nimport LinkButton from \"./LinkButton.jsx\";\nimport { cloneDeep } from \"lodash\";\nimport apis from \"../api\";\nimport \"./CreateOrEdit.css\";\n\n//THINGS TO DO\n\nclass CreateOrEdit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: \"\",\n      name: \"\",\n      species: \"\",\n      type: \"\",\n      constants: [[null, null, null]],\n      duplicateID: false\n    };\n  }\n\n  componentDidMount = async () => {\n    //if editing a kit, grab the kit data pushed into the history object (location.state). if the user just went to the url directly, i.e., didn't click in from a kit, there is no history so grab from localStorage\n    if (this.props.match.params.kitID) {\n      if (this.props.location.state) {\n        await this.setState(this.props.location.state);\n      } else {\n        console.log(\"Fetching saved update kit data...\");\n        const localForm = JSON.parse(localStorage.getItem(\"updateState\"));\n        await this.setState(localForm);\n        console.log(\"Saved update kit data loaded.\");\n      }\n      this.updateLocalStorage(\"update\");\n    } else {\n      //otherwise, creating kit, grab any form data from localStorage\n      console.log(\"Fetching saved create kit data...\");\n      const localForm = JSON.parse(localStorage.getItem(\"createState\"));\n      await this.setState(localForm);\n      console.log(\"Saved create kit data loaded.\");\n    }\n  };\n\n  updateLocalStorage = createOrUpdate => {\n    if (createOrUpdate === \"create\")\n      localStorage.setItem(\"createState\", JSON.stringify(this.state));\n    else if (createOrUpdate === \"update\")\n      localStorage.setItem(\"updateState\", JSON.stringify(this.state));\n  };\n\n  handleInput = async (e, constantRow, constantNameOrValue) => {\n    const constants = cloneDeep(this.state.constants);\n    //if we're modifying a constant, modify the corresponding sub-array on state\n    if (constantNameOrValue) {\n      if (constantNameOrValue === \"constantName\") {\n        constants[constantRow][0] = e.target.value;\n      } else if (constantNameOrValue === \"constantUnit\") {\n        constants[constantRow][1] = e.target.value;\n      } else if (constantNameOrValue === \"constantValue\") {\n        constants[constantRow][2] = e.target.value;\n      }\n      await this.setState({ constants });\n    }\n    //otherwise we are not dealing with constants, just update the appropriate fields\n    else {\n      await this.setState({ [e.target.name]: e.target.value });\n      //check to see if the ID is already used. there should not be duplicate kits\n      if (this.props.allKitIDs.has(this.state.id)) {\n        this.setState({ duplicateID: true });\n      } else {\n        this.setState({ duplicateID: false });\n      }\n    }\n    this.updateLocalStorage(\n      this.props.match.params.kitID ? \"update\" : \"create\"\n    );\n  };\n\n  checkID = () => {\n    if (this.props.allKitIDs.has(this.state.id)) {\n      alert(\"This kit ID is already in use.\");\n    }\n  };\n\n  capitalizeWords = string => {\n    const arrayOfWords = string.split(\" \");\n    const capitalizedArray = arrayOfWords.map(word => {\n      return word[0].toUpperCase() + word.slice(1);\n    });\n    return capitalizedArray.join(\" \");\n  };\n\n  processFields = (name, species, constants) => {\n    const namePrepped = this.capitalizeWords(String(name).trim());\n    const speciesPrepped = this.capitalizeWords(species.trim());\n    const constantsPrepped = constants.map(constantGroup => {\n      constantGroup = constantGroup.map(el => el.trim());\n      constantGroup[0] = this.capitalizeWords(constantGroup[0]);\n      return constantGroup;\n    });\n    return { namePrepped, speciesPrepped, constantsPrepped };\n  };\n\n  checkForEmptyFields = (id, name, species, type, constants) => {\n    let constantsEmpty = false;\n    for (let constant of constants) {\n      if (!constant[0] || !constant[1] || !constant[2]) constantsEmpty = true;\n    }\n    if (\n      id === \"\" ||\n      name === \"\" ||\n      species === \"\" ||\n      type === \"\" ||\n      constantsEmpty\n    ) {\n      alert(\"All fields must be filled.\");\n      return true;\n    }\n    return false;\n  };\n\n  validateFields = () => {\n    const { id, name, species, type, constants } = cloneDeep(this.state);\n\n    if (this.checkForEmptyFields(id, name, species, type, constants))\n      return false;\n\n    const {\n      namePrepped,\n      speciesPrepped,\n      constantsPrepped\n    } = this.processFields(name, species, constants);\n\n    return {\n      id: String(id),\n      name: namePrepped,\n      species: speciesPrepped,\n      type,\n      constants: constantsPrepped\n    };\n  };\n\n  handleSubmit = async (e, updateOrCreate) => {\n    e.preventDefault();\n    if (this.validateFields() === false) return;\n    const { id, name, species, type, constants } = this.validateFields();\n\n    updateOrCreate === \"update\"\n      ? await apis.updateKitById(id, {\n          name,\n          species,\n          type,\n          constants\n        })\n      : await apis.createKit({\n          id,\n          name,\n          species,\n          type,\n          constants\n        });\n    //if this was an update on a kit, make sure it gets updated in Table if present\n    if (updateOrCreate === \"update\") {\n      this.props.updateTableKitData(\n        {\n          id,\n          name,\n          species,\n          type,\n          constants\n        },\n        \"update\"\n      );\n      //bug: if user copy/pastes the edit kit URL in a new tab, it will update the kit in db but then send the user back to the default new tab page\n      this.props.history.goBack();\n    }\n    await this.clearStateAndStorage();\n    alert(\n      updateOrCreate === \"update\"\n        ? \"Kit updated in database!\"\n        : \"New kit added to database!\"\n    );\n\n    await this.props.fetchKitsFromDatabase();\n    //after App has finished grabbing the new set of kits, update the kits for the currentSpecies, in case the user goes back to the species Kits page, should see the new update\n    await this.props.selectSpecies(this.props.currentSpecies);\n  };\n\n  clearStateAndStorage = () => {\n    localStorage.removeItem(\n      this.props.match.params.kitID ? \"updateState\" : \"createState\"\n    );\n    this.setState({\n      id: \"\",\n      name: \"\",\n      species: \"\",\n      type: \"\",\n      constants: [[null, null, null]]\n    });\n  };\n\n  modifyConstantRows = async modification => {\n    if (modification === \"add\")\n      await this.setState({\n        constants: [...this.state.constants, [null, null, null]]\n      });\n    else if (modification === \"subtract\")\n      await this.setState({ constants: this.state.constants.slice(0, -1) });\n    this.updateLocalStorage(\n      this.props.match.params.kitID ? \"update\" : \"create\"\n    );\n  };\n\n  deleteKit = async kitID => {\n    const { id, name, species, type, constants } = cloneDeep(this.state);\n    this.clearStateAndStorage();\n    await apis.deleteKitById(kitID);\n    //update App state\n    await this.props.fetchKitsFromDatabase();\n    //update species' kits in Kits component if necessary\n    await this.props.selectSpecies(this.props.currentSpecies);\n\n    await this.props.updateTableKitData(\n      { id, name, species, type, constants },\n      \"delete\"\n    );\n    this.props.history.goBack();\n    console.log(\"Kit deleted from database.\");\n  };\n\n  createArrayOfNonRepeatingElements = indexToUse => {\n    const allConstantGroups = this.props.allKits.reduce((finalArray, kit) => {\n      finalArray.push(...kit.constants);\n      return finalArray;\n    }, []);\n    const set = new Set();\n    for (let constantGroup of allConstantGroups) {\n      set.add(constantGroup[indexToUse]);\n    }\n    return Array.from(set).sort();\n  };\n\n  render() {\n    return (\n      <div className=\"page\">\n        <header>\n          <h3 className=\"page-title\">\n            {this.props.match.params.kitID ? (\n              <>\n                Edit Kit (\n                <a\n                  href={`https://www.miltenyibiotec.com/US-en/search.html?search=${this.props.match.params.kitID}&options=on#globalSearchFamilies=%5B%5D`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {this.props.match.params.kitID}\n                </a>\n                )\n              </>\n            ) : (\n              \"Create Kit\"\n            )}\n          </h3>\n        </header>\n        <div className=\"create-body\">\n          <div>All fields required.</div>\n          <form\n            className=\"create-form\"\n            autoComplete=\"off\"\n            onSubmit={e => {\n              this.handleSubmit(\n                e,\n                this.props.match.params.kitID ? \"update\" : \"create\"\n              );\n            }}\n          >\n            <table>\n              <tbody>\n                <tr>\n                  <td align=\"right\">ID:</td>\n                  <td align=\"left\" colSpan={2}>\n                    <input\n                      type=\"text\"\n                      value={this.state.id}\n                      disabled={this.props.match.params.kitID ? true : false}\n                      name=\"id\"\n                      placeholder=\"000-000-000\"\n                      onChange={this.handleInput}\n                      onBlur={this.checkID}\n                      className={\n                        this.state.duplicateID && !this.props.match.params.kitID\n                          ? \"error\"\n                          : \"\"\n                      }\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td align=\"right\">Name:</td>\n                  <td align=\"left\" colSpan={2}>\n                    <input\n                      type=\"text\"\n                      value={this.state.name}\n                      name=\"name\"\n                      placeholder=\"CD000 Isolation Kit\"\n                      onChange={this.handleInput}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td align=\"right\">Species:</td>\n                  <td align=\"left\" colSpan={2}>\n                    <input\n                      type=\"text\"\n                      list=\"species-choices\"\n                      name=\"species\"\n                      onChange={this.handleInput}\n                      value={this.state.species}\n                      placeholder={this.state.species ? \"\" : \"Dragon\"}\n                    />\n                    <datalist id=\"species-choices\">\n                      {this.props.allSpecies.map(species => (\n                        <option key={species}>{species}</option>\n                      ))}\n                    </datalist>\n                  </td>\n                </tr>\n                <tr>\n                  <td align=\"right\">Type:</td>\n                  <td align=\"left\" colSpan={2}>\n                    <select\n                      name=\"type\"\n                      value={\n                        this.state.type === \"Positive\"\n                          ? \"Positive\"\n                          : this.state.type === \"Negative\"\n                          ? \"Negative\"\n                          : \"Select one:\"\n                      }\n                      onChange={this.handleInput}\n                    >\n                      <option hidden>Select one:</option>\n                      <option value=\"Positive\">Positive</option>\n                      <option value=\"Negative\">Negative</option>\n                    </select>\n                  </td>\n                </tr>\n                <tr>\n                  <td colSpan={3}>Constants</td>\n                </tr>\n\n                <tr>\n                  <td>Name</td>\n                  <td>Units</td>\n                  <td>Constant</td>\n                </tr>\n                {this.state.constants.map((constantRow, idx) => (\n                  <tr key={idx}>\n                    <td align=\"right\">\n                      <input\n                        type=\"text\"\n                        list=\"constants-names\"\n                        onChange={e => {\n                          this.handleInput(e, idx, \"constantName\");\n                        }}\n                        value={constantRow[0] || \"\"}\n                        placeholder={constantRow[0] ? \"\" : \"Fireball Cocktail\"}\n                      />\n                      <datalist id=\"constants-names\">\n                        {this.createArrayOfNonRepeatingElements(0).map(name => (\n                          <option key={name}>{name}</option>\n                        ))}\n                      </datalist>\n                    </td>\n\n                    <td>\n                      <input\n                        type=\"text\"\n                        list=\"units\"\n                        onChange={e => {\n                          this.handleInput(e, idx, \"constantUnit\");\n                        }}\n                        value={constantRow[1] || \"\"}\n                        placeholder={constantRow[1] ? \"\" : \"cups\"}\n                      />\n                      <datalist id=\"units\">\n                        {this.createArrayOfNonRepeatingElements(1).map(unit => (\n                          <option key={unit}>{unit}</option>\n                        ))}\n                      </datalist>\n                    </td>\n\n                    <td align=\"left\">\n                      <input\n                        type=\"text\"\n                        onChange={e => {\n                          this.handleInput(e, idx, \"constantValue\");\n                        }}\n                        value={constantRow[2] || \"\"}\n                        placeholder={constantRow[2] ? \"\" : \"000\"}\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <div className=\"create-add-subtract-container\">\n              <button\n                className=\"create-row-button add-row-button\"\n                type=\"button\"\n                onClick={() => this.modifyConstantRows(\"add\")}\n              >\n                Add Row\n              </button>\n              <button\n                className=\"create-row-button subtract-row-button\"\n                type=\"button\"\n                onClick={() => this.modifyConstantRows(\"subtract\")}\n              >\n                Subtract Row\n              </button>\n            </div>\n            <button type=\"button\" onClick={this.clearStateAndStorage}>\n              Clear All\n            </button>\n            <input\n              type=\"submit\"\n              value={\n                this.props.match.params.kitID ? \"Update Kit\" : \"Create Kit\"\n              }\n            />\n            {/* only show delete button if editing a kit */}\n            {this.props.match.params.kitID ? (\n              <button\n                type=\"button\"\n                onClick={() => {\n                  if (\n                    window.confirm(\n                      \"Confirm permanently deleting this kit from the database?\"\n                    )\n                  )\n                    this.deleteKit(this.state.id);\n                }}\n              >\n                Delete Kit\n              </button>\n            ) : null}\n          </form>\n        </div>\n        <footer>\n          <button\n            className=\"nav-button\"\n            onClick={() => {\n              this.props.history.goBack();\n            }}\n          >\n            Back\n          </button>\n          <LinkButton to=\"/\" className=\"nav-button home-button\">\n            Home\n          </LinkButton>\n\n          <LinkButton to=\"/table\" className=\"nav-button table-button\">\n            Table &#40;{this.props.rowCount} Samples&#41;\n          </LinkButton>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default CreateOrEdit;\n","import React from \"react\";\nimport LinkButton from \"./LinkButton.jsx\";\nimport \"./Error.css\";\n\nconst Error = () => {\n  return (\n    <>\n      <div>You are not logged in.</div>\n      <LinkButton to=\"/\" className=\"nav-button home-button\">\n        Home\n      </LinkButton>\n    </>\n  );\n};\n\nexport default Error;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Error from \"./Error\";\n\nconst PrivateRoute = ({\n  component: PrivateComponent,\n  path,\n  loggedIn,\n  ...rest\n}) => {\n  return (\n    <Route\n      path={path}\n      render={props =>\n        loggedIn ? (\n          <PrivateComponent {...props} {...rest} />\n        ) : (\n          //Error component shouldn't ever show up in normal use (because the 'edit' and 'create' buttons shouldn't even render), only if the user tries to access the component directly through URL\n          <Error />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React, { Component } from \"react\";\nimport apis from \"../api\";\nimport \"./Login.css\";\n\n//THINGS TO DO\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"admin\",\n      password: \"\",\n      passwordPlaceholder: \"\"\n    };\n  }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = async (e, action) => {\n    e.preventDefault();\n\n    if (action === \"login\") {\n      if (this.props.loggedIn) {\n        return this.setState({\n          password: \"\",\n          passwordPlaceholder: \"Already logged in!\"\n        });\n      } else if (this.state.password === \"\")\n        return this.setState({\n          passwordPlaceholder: \"Password needed!\"\n        });\n      apis\n        .logIn({\n          username: this.state.username,\n          password: this.state.password\n        })\n        .then(response => {\n          if (response.status === 200) {\n            // update App.js state so user is logged in everywhere\n            this.props.setLoggedInStatus(true);\n            this.setState({ password: \"\", passwordPlaceholder: \"\" });\n          }\n        })\n        .catch(error => {\n          console.log(\"Login error:\", error);\n          this.setState({\n            password: \"\",\n            passwordPlaceholder: \"Wrong password!\"\n          });\n        });\n    } else if (action === \"logout\") {\n      apis\n        .logOut()\n        .then(response => {\n          if (response.status === 200) {\n            // update App.js state so user is logged out everywhere\n            this.props.setLoggedInStatus(false);\n          }\n        })\n        .catch(error => {\n          console.log(\"login error: \");\n          console.log(error);\n        });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <input\n          onChange={this.handleChange}\n          name=\"password\"\n          autoComplete=\"off\"\n          value={this.state.password}\n          placeholder={this.state.passwordPlaceholder}\n        ></input>\n        <button\n          className=\"nav-button\"\n          onClick={e => {\n            this.handleSubmit(e, this.props.loggedIn ? \"logout\" : \"login\");\n          }}\n        >\n          {this.props.loggedIn ? \"Log Out\" : \"Log In\"}\n        </button>\n\n        <div>{this.props.loggedIn ? \"Full Access Mode\" : \"Visitor Mode\"}</div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { cloneDeep } from \"lodash\";\nimport {\n  Home,\n  Kits,\n  CreateOrEdit,\n  Table,\n  PrivateRoute,\n  Login,\n  Error\n} from \"./components\";\nimport apis from \"./api\";\nimport \"./App.css\";\n\n//THINGS TO DO\n//write a giant function for downloading from db, changing state, changing localstorage. use when C/U/D-ing. careful not to lose table data.\n//maybe set timer with each update, to clear localStorage in 24 hours. have button to stop auto-clear in case user wants to keep the table over the weekend or something.\n\n// DATA STRUCTURES EXAMPLES:\n// kit = {\n//   id: \"130-096-537\",\n//   name: \"Pan Monocyte Isolation Kit\",\n//   species: \"Human\",\n//   type: \"Negative\",\n//   constants: [\n//     [\"Buffer (µL)\", \"40\"],\n//     [\"FcR Blocking Reagent (µL)\", \"10\"],\n//     [\"Biotin-Antibody Cocktail (µL)\", \"10\"],\n//     [\"Incubation (min)\", \"5\"],\n//     [\"Buffer (µL)\", \"30\"],\n//     [\"Anti-Biotin Microbeads (µL)\", \"20\"],\n//     [\"Incubation (min)\", \"10\"],\n//     [\"Washes (times x mL)\", \"3 x 3\"]\n//   ]\n// };\n// tableKitIDs = { \"192-050-201\": 2, \"190-229-501\": 1, \"130-096-537\": 8 };\n// tableKitData = [{ kit1 }, { kit2 }, { kit3 }];\n// arrayedKitData = [\n//   [\"Human\", [{ kit1 }, { kit2 }]],\n//   [\"Mouse\", [{ kit1 }]]\n// ];\n// tableRowsHash = {\n//   Human: {\n//     \"130-096-537 0\": [\"Human Sample 24\", \"45.3\"],\n//     \"130-096-537 1\": [\"Human Sample 25\", \"21.5\"],\n//     \"130-096-537 2\": [\"Human Sample 26\", \"39.2\"],\n//     \"142-829-339 0\": [\"Human Sample 3\", \"224.1\"]\n//   },\n//   Mouse: {\n//     \"120-332-192 0\": [\"Mouse Pool\", \"31\"]\n//   }\n// };\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loggedIn: false,\n      allKits: [],\n      rowCount: 0,\n      currentSpecies: \"No Species Selected\",\n      currentPosKits: [],\n      currentNegKits: [],\n      tableKitIDs: {},\n      tableKitData: [],\n      arrayedKitData: [],\n      tableRowsHash: {},\n      allSpecies: [],\n      allKitIDs: {} //used for creating kit. checking if ID already exists\n    };\n\n    this.selectSpecies = this.selectSpecies.bind(this);\n    this.updateTable = this.updateTable.bind(this);\n    this.clearTable = this.clearTable.bind(this);\n    this.deleteSpeciesFromTable = this.deleteSpeciesFromTable.bind(this);\n    this.deleteKitFromTable = this.deleteKitFromTable.bind(this);\n    this.fetchKitsFromDatabase = this.fetchKitsFromDatabase.bind(this);\n    this.updateTableKitData = this.updateTableKitData.bind(this);\n    this.setLoggedInStatus = this.setLoggedInStatus.bind(this);\n  }\n\n  componentDidMount = async () => {\n    this.fetchLocalStorage();\n    this.fetchKitsFromDatabase();\n    this.getUser();\n  };\n\n  getUser = () => {\n    apis.checkLoginStatus().then(response => {\n      if (response.data.user) {\n        console.log(\"Existing session; logged in.\");\n        this.setState({\n          loggedIn: true\n        });\n      } else {\n        console.log(\"No existing session.\");\n        this.setState({\n          loggedIn: false\n        });\n      }\n    });\n  };\n\n  setLoggedInStatus = bool => {\n    this.setState({ loggedIn: bool });\n  };\n\n  fetchLocalStorage = async () => {\n    console.log(\"Fetching state from local storage...\");\n\n    const localState = JSON.parse(localStorage.getItem(\"appState\"));\n    if (localState) {\n      // do not need to store/fetch allKits or allSpecies, as those can change in the database and we want to always grab the newest update on loading app\n      const {\n        rowCount,\n        currentSpecies,\n        currentPosKits,\n        currentNegKits,\n        tableKitIDs,\n        tableKitData,\n        arrayedKitData,\n        tableRowsHash\n      } = localState;\n      await this.setState({\n        rowCount,\n        currentSpecies,\n        currentPosKits,\n        currentNegKits,\n        tableKitIDs,\n        tableKitData,\n        arrayedKitData,\n        tableRowsHash\n      });\n    }\n    console.log(\"State loaded.\");\n  };\n\n  //grabs all kits from db, generates array of allSpecies, generates hash of allKitIDs\n  //sets allKits, allSpecies, allKitIDs on state\n  fetchKitsFromDatabase = async () => {\n    console.log(\"Fetching kits from database...\");\n    const res = await apis.getAllKits();\n    const responseData = res.data.data;\n\n    const allKits = [];\n    for (let kit of responseData) {\n      //only grab the fields needed, excluding timestamps and database indices\n      const { id, name, species, type, constants } = kit;\n      allKits.push({\n        id,\n        name,\n        species,\n        type,\n        constants\n      });\n    }\n\n    const allSpecies = this.extractAllSpecies(allKits).sort();\n    const allKitIDs = this.createKitIDHash(allKits);\n    await this.setState({ allKits, allSpecies, allKitIDs });\n    console.log(\"All kits loaded.\");\n  };\n\n  createKitIDHash = allKits => {\n    let allKitIDs = new Set();\n    for (let kit of allKits) {\n      allKitIDs.add(kit.id);\n    }\n    return allKitIDs;\n  };\n\n  extractAllSpecies = allKits => {\n    const speciesSet = new Set();\n    for (let kit of allKits) {\n      speciesSet.add(kit.species);\n    }\n    return Array.from(speciesSet);\n  };\n\n  updateLocalStorage = () => {\n    localStorage.setItem(\"appState\", JSON.stringify(this.state));\n  };\n\n  modifyRowCount = modification => {\n    if (modification === \"add\")\n      this.setState({ rowCount: this.state.rowCount + 1 });\n    else if (modification === \"subtract\")\n      this.setState({ rowCount: this.state.rowCount - 1 });\n  };\n\n  //finds the current species' kits in allKits. calls this.sortKits to separate into positive and negative kit arrays\n  //sets currentSpecies, currentPosKits, currentNegKits on state\n  selectSpecies = async currentSpecies => {\n    const currentKits = this.state.allKits.filter(\n      kit => kit.species === currentSpecies\n    );\n    const { currentPosKits, currentNegKits } = this.sortKits(currentKits);\n    await this.setState({ currentSpecies, currentPosKits, currentNegKits });\n\n    this.updateLocalStorage();\n  };\n\n  sortKits = currentKits => {\n    const positiveKits = [];\n    const negativeKits = [];\n\n    for (let kit of currentKits) {\n      if (kit.type === \"Positive\") positiveKits.push(kit);\n      else if (kit.type === \"Negative\") negativeKits.push(kit);\n    }\n    return { currentPosKits: positiveKits, currentNegKits: negativeKits };\n  };\n\n  updateTable = async (modification, kit) => {\n    let tableKitIDs = Object.assign({}, this.state.tableKitIDs);\n    if (modification === \"add\") {\n      tableKitIDs[kit.id] = (tableKitIDs[kit.id] || 0) + 1;\n\n      let rowID = tableKitIDs[kit.id];\n      let rowKey = kit.id + \" \" + rowID;\n      await this.modifyTableRowsHash(modification, kit.species, rowKey);\n\n      await this.modifyRowCount(modification);\n      await this.setState({ tableKitIDs });\n      //if the kit quantity is increased to 1, add its data to the tableKitData array\n      if (tableKitIDs[kit.id] === 1) {\n        await this.addKitData(kit.id);\n      }\n    } else if (modification === \"subtract\") {\n      if (tableKitIDs[kit.id]) {\n        //remove from tableRowsHash first, before decrementing tableKitIDs. need the correct rowID\n        let rowID = tableKitIDs[kit.id];\n        let rowKey = kit.id + \" \" + rowID;\n        --tableKitIDs[kit.id];\n        await this.setState({ tableKitIDs });\n        await this.modifyTableRowsHash(modification, kit.species, rowKey);\n\n        await this.modifyRowCount(modification);\n      }\n\n      //if the kit quantity is zero, remove its data from the tableKitData array\n      if (!tableKitIDs[kit.id]) {\n        await this.removeKitData(kit.id);\n      }\n    }\n\n    this.updateLocalStorage();\n  };\n\n  addKitData = async kitID => {\n    //find the correct kit from allKits and add to the table\n    for (let kit of this.state.allKits) {\n      if (kit.id === kitID) {\n        const tableKitData = [...this.state.tableKitData, kit];\n        const arrayedKitData = this.hashifyKitData(tableKitData);\n        await this.setState({\n          tableKitData,\n          arrayedKitData\n        });\n        return;\n      }\n    }\n    console.log(\"Kit not found in allKits.\");\n    return;\n  };\n\n  removeKitData = kitID => {\n    const tableKitData = this.state.tableKitData;\n    const filteredKitData = tableKitData.filter(kit => kit.id !== kitID);\n    const arrayedKitData = this.hashifyKitData(filteredKitData);\n    this.setState({ tableKitData: filteredKitData, arrayedKitData });\n  };\n\n  updateTableKitData = async (updatedKit, mod) => {\n    //find the kit in tableKitData and replace or delete it\n    const tableKitData = cloneDeep(this.state.tableKitData);\n    if (mod === \"update\") {\n      for (let i = 0; i < tableKitData.length; i++) {\n        if (tableKitData[i].id === updatedKit.id) {\n          tableKitData[i] = updatedKit;\n          break;\n        }\n      }\n      //generate arrayedKitData for Table to use\n      const arrayedKitData = this.hashifyKitData(tableKitData);\n      await this.setState({ tableKitData, arrayedKitData });\n    } else if (mod === \"delete\") {\n      await this.deleteKitFromTable(updatedKit.id, updatedKit.species);\n    }\n    this.updateLocalStorage();\n  };\n\n  hashifyKitData = tableKitData => {\n    const kitDataHash = {};\n    for (let kit of tableKitData) {\n      kitDataHash[kit.species] = (kitDataHash[kit.species] || []).concat(kit);\n    }\n    return this.arrayifyKitData(kitDataHash);\n  };\n\n  arrayifyKitData = kitDataHash => {\n    let arrayedKitData = [];\n    for (let groupSpecies in kitDataHash) {\n      const groupArray = [groupSpecies, kitDataHash[groupSpecies]];\n      arrayedKitData.push(groupArray);\n    }\n    return arrayedKitData;\n  };\n\n  modifyTableRowsHash = async (modification, species, rowKey) => {\n    const tableRowsHash = cloneDeep(this.state.tableRowsHash);\n    if (modification === \"add\") {\n      if (!tableRowsHash[species]) tableRowsHash[species] = {};\n      tableRowsHash[species][rowKey] = [undefined, undefined];\n    } else if (modification === \"subtract\") {\n      delete tableRowsHash[species][rowKey];\n    }\n\n    await this.setState({ tableRowsHash });\n    this.updateLocalStorage();\n  };\n\n  updateRowCellCount = async (inputType, species, rowKey, input) => {\n    const tableRowsHash = cloneDeep(this.state.tableRowsHash);\n\n    if (inputType === \"cellCount\") {\n      tableRowsHash[species][rowKey][1] = input;\n    } else if (inputType === \"sampleID\") {\n      tableRowsHash[species][rowKey][0] = input;\n    }\n\n    await this.setState({ tableRowsHash });\n\n    this.updateLocalStorage();\n  };\n\n  deleteSpeciesFromTable = async species => {\n    let clone = cloneDeep(this.state);\n    let {\n      rowCount,\n      tableKitIDs,\n      tableKitData,\n      arrayedKitData,\n      tableRowsHash\n    } = clone;\n\n    //grab the number of rows that will be deleted, subtract from tableRows\n    const speciesRows = tableRowsHash[species];\n    const numRows = Object.keys(speciesRows).length;\n    rowCount -= numRows;\n    //delete the entire species and its rows from the hash table\n    delete tableRowsHash[species];\n    //delete kits from the species, from tableKitData array. at the same time, store the IDs of any kits deleted\n    let IDs = [];\n    tableKitData = tableKitData.filter(kit => {\n      if (kit.species !== species) return true;\n      IDs.push(kit.id);\n      return false;\n    });\n    //delete kits from tableKitIDs using the IDs grabbed during the modification of tableKitData\n    for (let ID of IDs) delete tableKitIDs[ID];\n    //delete species from arrayedKitData\n    arrayedKitData = arrayedKitData.filter(group => group[0] !== species);\n\n    await this.setState({\n      rowCount,\n      tableKitIDs,\n      tableKitData,\n      arrayedKitData,\n      tableRowsHash\n    });\n\n    this.updateLocalStorage();\n  };\n\n  deleteKitFromTable = async (kitID, kitSpecies) => {\n    let clone = cloneDeep(this.state);\n    let { rowCount, tableKitIDs, tableKitData, tableRowsHash } = clone;\n\n    //grab the number of rows that will be deleted, subtract from rowCount\n    let numRows = 0;\n    const kitsHash = tableRowsHash[kitSpecies];\n    for (let kit in kitsHash) {\n      if (kit.slice(0, -2) === kitID) {\n        ++numRows;\n        delete kitsHash[kit];\n      }\n    }\n    rowCount -= numRows;\n    //delete kits from tableKitIDs\n    for (let kit in tableKitIDs) {\n      if (kit === kitID) delete tableKitIDs[kit];\n    }\n\n    //delete kit from tableKitData\n    tableKitData = tableKitData.filter(kit => kit.id !== kitID);\n\n    //delete species from arrayedKitData\n    const arrayedKitData = this.hashifyKitData(tableKitData);\n\n    await this.setState({\n      rowCount,\n      tableKitIDs,\n      tableKitData,\n      arrayedKitData,\n      tableRowsHash\n    });\n\n    this.updateLocalStorage();\n  };\n\n  clearTable = async () => {\n    await this.setState({\n      rowCount: 0,\n      tableKitIDs: {},\n      tableKitData: [],\n      arrayedKitData: [],\n      tableRowsHash: {}\n    });\n    this.updateLocalStorage();\n  };\n\n  render() {\n    return (\n      <Router className=\"main\">\n        <Login\n          loggedIn={this.state.loggedIn}\n          setLoggedInStatus={this.setLoggedInStatus}\n        />\n        <Switch>\n          <Route\n            path=\"/kits\"\n            render={props => (\n              <Kits\n                {...props}\n                loggedIn={this.state.loggedIn}\n                currentSpecies={this.state.currentSpecies}\n                currentPosKits={this.state.currentPosKits}\n                currentNegKits={this.state.currentNegKits}\n                rowCount={this.state.rowCount}\n                tableKitIDs={this.state.tableKitIDs}\n                updateTable={this.updateTable}\n              />\n            )}\n          ></Route>\n\n          <PrivateRoute\n            path=\"/edit/:kitID\"\n            component={CreateOrEdit}\n            loggedIn={this.state.loggedIn}\n            allKits={this.state.allKits}\n            rowCount={this.state.rowCount}\n            allKitIDs={this.state.allKitIDs}\n            currentSpecies={this.state.currentSpecies}\n            allSpecies={this.state.allSpecies}\n            fetchKitsFromDatabase={this.fetchKitsFromDatabase}\n            selectSpecies={this.selectSpecies}\n            updateTableKitData={this.updateTableKitData}\n          ></PrivateRoute>\n\n          <PrivateRoute\n            path=\"/create\"\n            component={CreateOrEdit}\n            loggedIn={this.state.loggedIn}\n            allKits={this.state.allKits}\n            rowCount={this.state.rowCount}\n            allKitIDs={this.state.allKitIDs}\n            currentSpecies={this.state.currentSpecies}\n            allSpecies={this.state.allSpecies}\n            fetchKitsFromDatabase={this.fetchKitsFromDatabase}\n            selectSpecies={this.selectSpecies}\n          ></PrivateRoute>\n\n          <Route\n            path=\"/table\"\n            render={props => (\n              <Table\n                {...props}\n                loggedIn={this.state.loggedIn}\n                tableKitIDs={this.state.tableKitIDs}\n                tableKitData={this.state.tableKitData}\n                arrayedKitData={this.state.arrayedKitData}\n                tableRowsHash={this.state.tableRowsHash}\n                selectSpecies={this.selectSpecies}\n                updateTable={this.updateTable}\n                updateRowCellCount={this.updateRowCellCount}\n                deleteSpeciesFromTable={this.deleteSpeciesFromTable}\n                deleteKitFromTable={this.deleteKitFromTable}\n                clearTable={this.clearTable}\n              />\n            )}\n          ></Route>\n\n          <Route\n            path=\"/\"\n            exact={true}\n            render={props => (\n              <Home\n                {...props}\n                rowCount={this.state.rowCount}\n                allSpecies={this.state.allSpecies}\n                selectSpecies={this.selectSpecies}\n              />\n            )}\n          ></Route>\n\n          <Route path=\"/error\" render={props => <Error {...props} />}></Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}